#!/usr/bin/env python3
from datetime import datetime
import os
import pwd
import re
import subprocess
from tempfile import TemporaryDirectory

UID = pwd.getpwnam('{{opendkim_unix_user}}').pw_uid
GID = pwd.getpwnam('{{opendkim_unix_group}}').pw_gid
SOM = datetime.now().replace(day=1)

PATTERN_OPENDKIM_KEY = re.compile(r'(?P<host>\d+\.\w+)\s+\w+\s+\w+\s+\(\s*'
        r'(?P<value>.*)\s*\)\s*;\s+--')
PATTERN_KEY_TABLE = re.compile(r'^(?P<selector>\d{6})\._domainkey\.'
        r'(?P<domain>[\w.-]+)')
PATTERN_SIGNING_TABLE = re.compile(r'(?P<selector>\d{6})\._domainkey\.'
        r'(?P<domain>[\w.-]+)$')


def read_record_file(filename):
    """
    Example:
    201407._domainkey       IN      TXT     ( "v=DKIM1; h=rsa-sha256; k=rsa; s=email; "
              "p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsCXUesKjMbVtfl7V10L9mxpo4XbD9j9GvrYtFXwztC9/gIvfj4Kn7S5ny0Qpgjb03FMd9MsZhmUv4xXB3rG/tisLpKabPlc3AIRREckECo5pkcfxhKo3btmexJPGY9FUycUZ0NLnkpYViH1yPx5IvL1xDGEg0v6qC0t/l/OeDC4J739QdYzTUcpK40ShbyckJ0UGGkLPMPJ7x9"
              "5w53u2M4U/FCA2+JvETEyNwGVWy3IvFT1i7B6syxCpI4HE12wk3oGTz+ha2CXZKhGT8XyFW0dKaaRANUVUWbNE/dLKUAZgHpZcX9OD7wuQ/xPDi6N81XGvHj0jmf06dr+8gqtNFwIDAQAB" )  ; ----- DKIM key 201407 for fireh.net
    """
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read().replace('\n', '')

    match = PATTERN_OPENDKIM_KEY.search(content)
    hostname = match.group('host')
    value = ''.join(re.split(r'"\s+"', match.group('value'))).strip('" ')

    return hostname, value


def delete_old_dkim_records(domain, provider):
    try:
        sopm = SOM.replace(month=SOM.month - 1)
    except ValueError:
        sopm = SOM.replace(year=SOM.year - 1, month=1)
    selector = sopm.strftime('%Y%m')

    subprocess.call(['lexicon', provider, 'delete', domain, 'TXT',
            '--name=%s._domainkey.%s.' % (selector, domain)])

    selfile = '/etc/opendkim/selectors/%s-%s' % (selector, domain)
    if os.path.exists(selfile):
        os.remove(selfile)


def update_selector_dkim_records(selector, domain, provider):
    if os.path.exists('/etc/opendkim/selectors/%s-%s' % (selector, domain)):
        return

    with TemporaryDirectory() as tmpdir:
        subprocess.check_call(['opendkim-genkey', '-b', '2048', '-h',
                'rsa-sha256', '-r', '-s', selector, '-d', domain],
                cwd=tmpdir)

        # process record file
        hostname, txt_value = read_record_file(os.path.join(tmpdir,
                selector + '.txt'))
        os.remove(os.path.join(tmpdir, selector + '.txt'))
        txt_value = txt_value.replace('h=rsa-', 'h=')

        subprocess.check_call(['lexicon', provider, 'create', domain, 'TXT',
                '--name=%s.%s.' % (hostname, domain),
                '--content=%s' % txt_value])

        # process key file
        privkey = '/etc/opendkim/keys/%s.private' % domain
        if os.path.exists(privkey):
            os.remove(privkey)
        os.rename(os.path.join(tmpdir, selector + '.private'), privkey)
        os.chown(privkey, UID, GID)
        os.chmod(privkey, 0o0600)

    # update the key table
    with open('/etc/opendkim/key.table', 'r', encoding='utf-8') as f:
        lines = [x.rstrip() for x in f.readlines()]
    lines = [x for x in lines if x]

    for ii, signkey in enumerate(lines):
        match = PATTERN_KEY_TABLE.search(signkey)
        if match and match.group('domain') == domain:
            lines[ii] = f'{selector}._domainkey.{domain} ' +\
                    f'{domain}:{selector}:{privkey}'
            break
    else:
        lines.append(f'{selector}._domainkey.{domain} ' +\
                f'{domain}:{selector}:{privkey}')

    with open('/etc/opendkim/key.table', 'w', encoding='utf-8') as f:
        for line in lines:
            f.write(line)
            f.write('\n')

    # update the signing table
    with open('/etc/opendkim/signing.table', 'r', encoding='utf-8') as f:
        lines = [x.rstrip() for x in f.readlines()]
    lines = [x for x in lines if x]

    for ii, signkey in enumerate(lines):
        match = PATTERN_SIGNING_TABLE.search(signkey)
        if match and match.group('domain') == domain:
            lines[ii] = f'*@{domain} {selector}._domainkey.{domain}'
            break
    else:
        lines.append(f'*@{domain} {selector}._domainkey.{domain}')

    with open('/etc/opendkim/signing.table', 'w', encoding='utf-8') as f:
        for line in lines:
            f.write(line)
            f.write('\n')



def update_dkim_records(domain, provider, shell_env):
    for key, value in shell_env.items():
        os.environ[key] = value

    # We want to change opendkim signing key every month.
    update_selector_dkim_records(SOM.strftime('%Y%m'), domain, provider)

    # Do clean up
    delete_old_dkim_records(domain, provider)

    # touch state
    with open('/etc/opendkim/selectors/%s-%s' % (SOM.strftime('%Y%m'), domain),
            'w', encoding='utf-8') as f:
        pass


{% for domain in mta_managed_domains %}
update_dkim_records('{{domain}}',
        '{{managed_domains[domain].lexicon_provider}}',
        {{managed_domains[domain].environment|to_nice_json}})
{% endfor %}
